<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="230.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="213" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="213" > </text>
<g id="frames">
<g >
<title> `$wchallengeScalar` (445,753,072 samples, 5.46%)</title><rect x="928.9" y="133" width="64.5" height="15.0" fill="rgb(241,16,39)" rx="2" ry="2" />
<text  x="931.94" y="143.5" > `$wcha..</text>
</g>
<g >
<title> even (3,821,164 samples, 0.05%)</title><rect x="1171.4" y="53" width="0.6" height="15.0" fill="rgb(222,19,51)" rx="2" ry="2" />
<text  x="1174.42" y="63.5" ></text>
</g>
<g >
<title> exponentiate (67,078,462 samples, 0.82%)</title><rect x="1154.4" y="101" width="9.7" height="15.0" fill="rgb(205,129,17)" rx="2" ry="2" />
<text  x="1157.40" y="111.5" ></text>
</g>
<g >
<title> even (5,555,291 samples, 0.07%)</title><rect x="1051.6" y="69" width="0.8" height="15.0" fill="rgb(253,97,36)" rx="2" ry="2" />
<text  x="1054.63" y="79.5" ></text>
</g>
<g >
<title> exponentiate (54,411,460 samples, 0.67%)</title><rect x="1168.0" y="69" width="7.9" height="15.0" fill="rgb(254,8,40)" rx="2" ry="2" />
<text  x="1171.02" y="79.5" ></text>
</g>
<g >
<title> even (7,465,873 samples, 0.09%)</title><rect x="1033.1" y="101" width="1.1" height="15.0" fill="rgb(229,44,47)" rx="2" ry="2" />
<text  x="1036.15" y="111.5" ></text>
</g>
<g >
<title> exponentiate (72,417,190 samples, 0.89%)</title><rect x="1037.3" y="85" width="10.5" height="15.0" fill="rgb(239,10,40)" rx="2" ry="2" />
<text  x="1040.31" y="95.5" ></text>
</g>
<g >
<title> exponentiate (27,054,056 samples, 0.33%)</title><rect x="1172.0" y="53" width="3.9" height="15.0" fill="rgb(227,186,40)" rx="2" ry="2" />
<text  x="1174.98" y="63.5" ></text>
</g>
<g >
<title> exponentiate (71,678,462 samples, 0.88%)</title><rect x="1178.6" y="69" width="10.4" height="15.0" fill="rgb(238,4,52)" rx="2" ry="2" />
<text  x="1181.64" y="79.5" ></text>
</g>
<g >
<title> mkScalar (788,258 samples, 0.01%)</title><rect x="1189.8" y="117" width="0.1" height="15.0" fill="rgb(246,181,4)" rx="2" ry="2" />
<text  x="1192.79" y="127.5" ></text>
</g>
<g >
<title> go (20,970,422 samples, 0.26%)</title><rect x="1056.0" y="149" width="3.1" height="15.0" fill="rgb(240,13,14)" rx="2" ry="2" />
<text  x="1059.05" y="159.5" ></text>
</g>
<g >
<title>verifyPlonkFast (8,159,551,427 samples, 100.00%)</title><rect x="10.0" y="165" width="1180.0" height="15.0" fill="rgb(228,198,6)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >verifyPlonkFast</text>
</g>
<g >
<title> even (2,865,873 samples, 0.04%)</title><rect x="1036.9" y="85" width="0.4" height="15.0" fill="rgb(245,126,3)" rx="2" ry="2" />
<text  x="1039.89" y="95.5" ></text>
</g>
<g >
<title> exponentiate (72,417,190 samples, 0.89%)</title><rect x="1019.6" y="101" width="10.5" height="15.0" fill="rgb(250,138,15)" rx="2" ry="2" />
<text  x="1022.63" y="111.5" ></text>
</g>
<g >
<title> transcriptNew (9,908,550 samples, 0.12%)</title><rect x="1076.1" y="149" width="1.4" height="15.0" fill="rgb(249,162,31)" rx="2" ry="2" />
<text  x="1079.09" y="159.5" ></text>
</g>
<g >
<title> exponentiateMod (4,814,916 samples, 0.06%)</title><rect x="1189.0" y="69" width="0.7" height="15.0" fill="rgb(234,112,40)" rx="2" ry="2" />
<text  x="1192.01" y="79.5" ></text>
</g>
<g >
<title>all (8,159,551,427 samples, 100%)</title><rect x="10.0" y="181" width="1180.0" height="15.0" fill="rgb(205,88,42)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title> even (1,910,582 samples, 0.02%)</title><rect x="1154.1" y="101" width="0.3" height="15.0" fill="rgb(251,186,39)" rx="2" ry="2" />
<text  x="1157.12" y="111.5" ></text>
</g>
<g >
<title> even (1,910,582 samples, 0.02%)</title><rect x="1166.6" y="85" width="0.3" height="15.0" fill="rgb(208,107,26)" rx="2" ry="2" />
<text  x="1169.58" y="95.5" ></text>
</g>
<g >
<title> go (776,096,272 samples, 9.51%)</title><rect x="1077.8" y="133" width="112.2" height="15.0" fill="rgb(217,88,32)" rx="2" ry="2" />
<text  x="1080.76" y="143.5" > go</text>
</g>
<g >
<title> takeByteString (73,455,360 samples, 0.90%)</title><rect x="982.8" y="117" width="10.6" height="15.0" fill="rgb(209,185,29)" rx="2" ry="2" />
<text  x="985.78" y="127.5" ></text>
</g>
<g >
<title> even (2,865,873 samples, 0.04%)</title><rect x="1000.2" y="117" width="0.4" height="15.0" fill="rgb(240,225,48)" rx="2" ry="2" />
<text  x="1003.20" y="127.5" ></text>
</g>
<g >
<title> mkScalar (7,757,631 samples, 0.10%)</title><rect x="1058.0" y="133" width="1.1" height="15.0" fill="rgb(211,87,8)" rx="2" ry="2" />
<text  x="1060.96" y="143.5" ></text>
</g>
<g >
<title> even (2,865,873 samples, 0.04%)</title><rect x="997.1" y="133" width="0.4" height="15.0" fill="rgb(215,120,5)" rx="2" ry="2" />
<text  x="1000.12" y="143.5" ></text>
</g>
<g >
<title> exponentiateMod (179,433,358 samples, 2.20%)</title><rect x="1030.1" y="117" width="25.9" height="15.0" fill="rgb(229,146,39)" rx="2" ry="2" />
<text  x="1033.10" y="127.5" > ..</text>
</g>
<g >
<title> even (14,931,746 samples, 0.18%)</title><rect x="1041.7" y="69" width="2.2" height="15.0" fill="rgb(214,56,25)" rx="2" ry="2" />
<text  x="1044.75" y="79.5" ></text>
</g>
<g >
<title> exponentiate (62,478,462 samples, 0.77%)</title><rect x="1166.9" y="85" width="9.0" height="15.0" fill="rgb(206,129,35)" rx="2" ry="2" />
<text  x="1169.85" y="95.5" ></text>
</g>
<g >
<title> exponentiate (98,317,693 samples, 1.20%)</title><rect x="997.5" y="133" width="14.3" height="15.0" fill="rgb(212,149,9)" rx="2" ry="2" />
<text  x="1000.53" y="143.5" ></text>
</g>
<g >
<title> even (6,510,582 samples, 0.08%)</title><rect x="1156.0" y="85" width="0.9" height="15.0" fill="rgb(231,55,0)" rx="2" ry="2" />
<text  x="1158.96" y="95.5" ></text>
</g>
<g >
<title> exponentiate (102,917,693 samples, 1.26%)</title><rect x="1015.2" y="117" width="14.9" height="15.0" fill="rgb(211,46,48)" rx="2" ry="2" />
<text  x="1018.21" y="127.5" ></text>
</g>
<g >
<title> exponentiate (22,454,056 samples, 0.28%)</title><rect x="1160.9" y="69" width="3.2" height="15.0" fill="rgb(224,43,46)" rx="2" ry="2" />
<text  x="1163.85" y="79.5" ></text>
</g>
<g >
<title> exponentiateMod (433,149,834 samples, 5.31%)</title><rect x="993.4" y="149" width="62.6" height="15.0" fill="rgb(237,83,48)" rx="2" ry="2" />
<text  x="996.41" y="159.5" > expon..</text>
</g>
<g >
<title> takeByteString (5,731,920 samples, 0.07%)</title><rect x="1150.8" y="85" width="0.8" height="15.0" fill="rgb(217,33,35)" rx="2" ry="2" />
<text  x="1153.82" y="95.5" ></text>
</g>
<g >
<title> exponentiateMod (263,131,392 samples, 3.22%)</title><rect x="1151.6" y="117" width="38.1" height="15.0" fill="rgb(229,212,12)" rx="2" ry="2" />
<text  x="1154.65" y="127.5" > ex..</text>
</g>
<g >
<title> exponentiate (26,781,084 samples, 0.33%)</title><rect x="1043.9" y="69" width="3.9" height="15.0" fill="rgb(205,196,18)" rx="2" ry="2" />
<text  x="1046.91" y="79.5" ></text>
</g>
<g >
<title> even (2,865,873 samples, 0.04%)</title><rect x="1019.2" y="101" width="0.4" height="15.0" fill="rgb(212,185,5)" rx="2" ry="2" />
<text  x="1022.21" y="111.5" ></text>
</g>
<g >
<title> exponentiateMod (306,291,596 samples, 3.75%)</title><rect x="1011.8" y="133" width="44.2" height="15.0" fill="rgb(247,119,48)" rx="2" ry="2" />
<text  x="1014.75" y="143.5" > exp..</text>
</g>
<g >
<title> exponentiate (93,717,693 samples, 1.15%)</title><rect x="1034.2" y="101" width="13.6" height="15.0" fill="rgb(239,171,48)" rx="2" ry="2" />
<text  x="1037.23" y="111.5" ></text>
</g>
<g >
<title> exponentiate (8,927,028 samples, 0.11%)</title><rect x="1054.4" y="53" width="1.3" height="15.0" fill="rgb(253,66,48)" rx="2" ry="2" />
<text  x="1057.41" y="63.5" ></text>
</g>
<g >
<title> zipWith (777,795,008 samples, 9.53%)</title><rect x="1077.5" y="149" width="112.5" height="15.0" fill="rgb(224,181,46)" rx="2" ry="2" />
<text  x="1080.52" y="159.5" > zipWith</text>
</g>
<g >
<title> exponentiate (22,181,084 samples, 0.27%)</title><rect x="1026.9" y="85" width="3.2" height="15.0" fill="rgb(209,197,40)" rx="2" ry="2" />
<text  x="1029.89" y="95.5" ></text>
</g>
<g >
<title> exponentiate (77,017,190 samples, 0.94%)</title><rect x="1000.6" y="117" width="11.2" height="15.0" fill="rgb(234,107,17)" rx="2" ry="2" />
<text  x="1003.61" y="127.5" ></text>
</g>
<g >
<title> mkScalar (117,593,489 samples, 1.44%)</title><rect x="1059.1" y="149" width="17.0" height="15.0" fill="rgb(232,116,2)" rx="2" ry="2" />
<text  x="1062.08" y="159.5" ></text>
</g>
<g >
<title> even (1,910,582 samples, 0.02%)</title><rect x="1167.7" y="69" width="0.3" height="15.0" fill="rgb(229,2,46)" rx="2" ry="2" />
<text  x="1170.74" y="79.5" ></text>
</g>
<g >
<title> exponentiate (22,605,730 samples, 0.28%)</title><rect x="1052.4" y="69" width="3.3" height="15.0" fill="rgb(219,191,5)" rx="2" ry="2" />
<text  x="1055.43" y="79.5" ></text>
</g>
<g >
<title> exponentiateMod (177,025,900 samples, 2.17%)</title><rect x="1164.1" y="101" width="25.6" height="15.0" fill="rgb(247,214,50)" rx="2" ry="2" />
<text  x="1167.10" y="111.5" > ..</text>
</g>
<g >
<title> exponentiateMod (95,520,408 samples, 1.17%)</title><rect x="1175.9" y="85" width="13.8" height="15.0" fill="rgb(222,104,19)" rx="2" ry="2" />
<text  x="1178.89" y="95.5" ></text>
</g>
<g >
<title> even (1,910,582 samples, 0.02%)</title><rect x="1180.9" y="53" width="0.2" height="15.0" fill="rgb(210,64,11)" rx="2" ry="2" />
<text  x="1183.86" y="63.5" ></text>
</g>
<g >
<title> even (8,421,164 samples, 0.10%)</title><rect x="1159.6" y="69" width="1.3" height="15.0" fill="rgb(221,150,17)" rx="2" ry="2" />
<text  x="1162.64" y="79.5" ></text>
</g>
<g >
<title> exponentiate (49,811,460 samples, 0.61%)</title><rect x="1156.9" y="85" width="7.2" height="15.0" fill="rgb(239,206,41)" rx="2" ry="2" />
<text  x="1159.90" y="95.5" ></text>
</g>
<g >
<title> mkScalar (163,219,936 samples, 2.00%)</title><rect x="959.2" y="117" width="23.6" height="15.0" fill="rgb(225,3,48)" rx="2" ry="2" />
<text  x="962.18" y="127.5" > ..</text>
</g>
<g >
<title> exponentiate (22,181,084 samples, 0.27%)</title><rect x="1008.5" y="101" width="3.3" height="15.0" fill="rgb(237,5,25)" rx="2" ry="2" />
<text  x="1011.54" y="111.5" ></text>
</g>
<g >
<title> `$wchallengeScalar` (49,492,510 samples, 0.61%)</title><rect x="1144.5" y="101" width="7.1" height="15.0" fill="rgb(238,93,5)" rx="2" ry="2" />
<text  x="1147.49" y="111.5" ></text>
</g>
<g >
<title> even (3,821,164 samples, 0.05%)</title><rect x="1185.2" y="37" width="0.6" height="15.0" fill="rgb(222,165,37)" rx="2" ry="2" />
<text  x="1188.21" y="47.5" ></text>
</g>
<g >
<title> go (849,368 samples, 0.01%)</title><rect x="1057.8" y="133" width="0.2" height="15.0" fill="rgb(230,61,24)" rx="2" ry="2" />
<text  x="1060.84" y="143.5" ></text>
</g>
<g >
<title> even (5,731,746 samples, 0.07%)</title><rect x="1007.7" y="101" width="0.8" height="15.0" fill="rgb(229,41,51)" rx="2" ry="2" />
<text  x="1010.72" y="111.5" ></text>
</g>
<g >
<title> exponentiateMod (57,175,120 samples, 0.70%)</title><rect x="1047.8" y="101" width="8.2" height="15.0" fill="rgb(239,225,25)" rx="2" ry="2" />
<text  x="1050.78" y="111.5" ></text>
</g>
<g >
<title> even (7,465,873 samples, 0.09%)</title><rect x="1014.1" y="117" width="1.1" height="15.0" fill="rgb(235,108,30)" rx="2" ry="2" />
<text  x="1017.13" y="127.5" ></text>
</g>
<g >
<title> even (6,510,582 samples, 0.08%)</title><rect x="1177.7" y="69" width="0.9" height="15.0" fill="rgb(210,201,17)" rx="2" ry="2" />
<text  x="1180.70" y="79.5" ></text>
</g>
<g >
<title> mkScalar (14,077,492 samples, 0.17%)</title><rect x="1148.8" y="85" width="2.0" height="15.0" fill="rgb(227,78,10)" rx="2" ry="2" />
<text  x="1151.78" y="95.5" ></text>
</g>
<g >
<title> even (10,331,746 samples, 0.13%)</title><rect x="1025.4" y="85" width="1.5" height="15.0" fill="rgb(243,211,4)" rx="2" ry="2" />
<text  x="1028.40" y="95.5" ></text>
</g>
<g >
<title> exponentiateMod (2,407,458 samples, 0.03%)</title><rect x="1055.7" y="85" width="0.3" height="15.0" fill="rgb(214,154,42)" rx="2" ry="2" />
<text  x="1058.70" y="95.5" ></text>
</g>
<g >
<title> even (955,291 samples, 0.01%)</title><rect x="1051.0" y="85" width="0.2" height="15.0" fill="rgb(240,151,37)" rx="2" ry="2" />
<text  x="1054.04" y="95.5" ></text>
</g>
<g >
<title> exponentiate (54,411,460 samples, 0.67%)</title><rect x="1181.1" y="53" width="7.9" height="15.0" fill="rgb(246,178,29)" rx="2" ry="2" />
<text  x="1184.14" y="63.5" ></text>
</g>
<g >
<title> exponentiate (22,454,056 samples, 0.28%)</title><rect x="1185.8" y="37" width="3.2" height="15.0" fill="rgb(253,65,18)" rx="2" ry="2" />
<text  x="1188.76" y="47.5" ></text>
</g>
<g >
<title> challengeScalar (59,188,718 samples, 0.73%)</title><rect x="1143.1" y="117" width="8.5" height="15.0" fill="rgb(233,139,29)" rx="2" ry="2" />
<text  x="1146.09" y="127.5" ></text>
</g>
<g >
<title> exponentiate (31,239,231 samples, 0.38%)</title><rect x="1051.2" y="85" width="4.5" height="15.0" fill="rgb(249,184,34)" rx="2" ry="2" />
<text  x="1054.18" y="95.5" ></text>
</g>
<g >
<title> challengeScalar (514,122,736 samples, 6.30%)</title><rect x="919.1" y="149" width="74.3" height="15.0" fill="rgb(231,113,43)" rx="2" ry="2" />
<text  x="922.06" y="159.5" > challen..</text>
</g>
<g >
<title> even (6,510,582 samples, 0.08%)</title><rect x="1053.5" y="53" width="0.9" height="15.0" fill="rgb(229,132,34)" rx="2" ry="2" />
<text  x="1056.47" y="63.5" ></text>
</g>
</g>
</svg>
