
running 11 tests
test polynomial::tests::test_division ... ok
test polynomial::tests::test_addition ... ok
test polynomial::tests::eval ... ok
test polynomial::tests::test_mult ... ok
test polynomial::tests::test_interpolation ... ok
test transcript::tests::test_transcript ... ok
test polynomial::tests::test_subtraction ... ok
test kzg10::tests::test_setup ... ok
test kzg10::tests::test_kzg ... ok
{
  "commitment_a": [
    141,
    152,
    5,
    81,
    223,
    136,
    112,
    95,
    105,
    5,
    154,
    182,
    88,
    196,
    55,
    222,
    156,
    190,
    19,
    25,
    35,
    61,
    225,
    253,
    51,
    57,
    222,
    50,
    197,
    230,
    114,
    38,
    252,
    51,
    203,
    253,
    56,
    67,
    130,
    188,
    21,
    115,
    188,
    0,
    70,
    48,
    203,
    59
  ],
  "commitment_b": [
    176,
    251,
    47,
    196,
    24,
    54,
    97,
    148,
    63,
    165,
    115,
    30,
    217,
    167,
    249,
    187,
    20,
    214,
    151,
    54,
    98,
    42,
    41,
    150,
    226,
    245,
    190,
    69,
    197,
    46,
    26,
    155,
    149,
    75,
    216,
    95,
    38,
    31,
    164,
    144,
    179,
    33,
    205,
    49,
    17,
    16,
    239,
    50
  ],
  "commitment_c": [
    174,
    74,
    187,
    199,
    24,
    6,
    29,
    253,
    90,
    107,
    232,
    44,
    107,
    25,
    183,
    252,
    138,
    91,
    187,
    26,
    124,
    99,
    9,
    205,
    67,
    108,
    77,
    113,
    6,
    86,
    3,
    113,
    85,
    82,
    121,
    78,
    184,
    28,
    143,
    238,
    189,
    189,
    177,
    193,
    62,
    69,
    65,
    114
  ],
  "commitment_z": [
    173,
    6,
    17,
    60,
    149,
    201,
    133,
    194,
    14,
    170,
    145,
    177,
    38,
    121,
    91,
    104,
    128,
    71,
    105,
    80,
    229,
    117,
    55,
    56,
    22,
    253,
    169,
    2,
    6,
    239,
    33,
    89,
    104,
    14,
    58,
    152,
    101,
    229,
    241,
    165,
    40,
    61,
    153,
    109,
    243,
    152,
    149,
    208
  ],
  "t_low": [
    134,
    49,
    32,
    134,
    142,
    172,
    112,
    136,
    251,
    137,
    217,
    14,
    110,
    84,
    234,
    116,
    152,
    190,
    180,
    73,
    179,
    114,
    109,
    189,
    208,
    1,
    17,
    136,
    156,
    54,
    14,
    195,
    226,
    97,
    110,
    95,
    182,
    17,
    191,
    203,
    84,
    76,
    185,
    208,
    237,
    187,
    195,
    48
  ],
  "t_mid": [
    174,
    243,
    54,
    35,
    40,
    235,
    252,
    132,
    72,
    30,
    21,
    16,
    146,
    134,
    221,
    35,
    1,
    139,
    104,
    221,
    28,
    224,
    94,
    135,
    224,
    209,
    109,
    76,
    198,
    241,
    237,
    28,
    255,
    7,
    213,
    33,
    128,
    88,
    198,
    53,
    17,
    86,
    219,
    98,
    8,
    239,
    35,
    203
  ],
  "t_high": [
    169,
    181,
    35,
    168,
    195,
    255,
    93,
    223,
    137,
    253,
    212,
    225,
    52,
    159,
    225,
    204,
    15,
    155,
    245,
    232,
    20,
    67,
    83,
    58,
    236,
    75,
    144,
    119,
    120,
    219,
    153,
    138,
    98,
    18,
    215,
    28,
    8,
    63,
    182,
    68,
    68,
    141,
    9,
    45,
    183,
    149,
    18,
    134
  ],
  "w_omega": [
    181,
    127,
    63,
    48,
    117,
    229,
    179,
    250,
    207,
    28,
    165,
    241,
    49,
    46,
    204,
    248,
    68,
    39,
    100,
    221,
    73,
    86,
    162,
    162,
    194,
    29,
    131,
    167,
    190,
    100,
    231,
    111,
    35,
    173,
    96,
    108,
    224,
    114,
    96,
    213,
    199,
    199,
    155,
    58,
    225,
    127,
    87,
    161
  ],
  "w_omega_zeta": [
    153,
    236,
    4,
    21,
    106,
    180,
    56,
    147,
    185,
    94,
    204,
    81,
    233,
    77,
    230,
    75,
    4,
    12,
    9,
    36,
    53,
    17,
    219,
    44,
    99,
    94,
    229,
    112,
    249,
    226,
    6,
    0,
    93,
    63,
    245,
    29,
    133,
    202,
    97,
    52,
    203,
    172,
    165,
    94,
    15,
    150,
    2,
    113
  ],
  "a_eval": [
    4401798449061541272,
    18303187885817996871,
    13763564676064888553,
    5870977852124814770
  ],
  "b_eval": [
    3125911928070605410,
    8470899119699582372,
    14675555938459380127,
    6747244764348081204
  ],
  "c_eval": [
    4825300159175483725,
    12881973094854737451,
    11383675567040750420,
    5368934591689799482
  ],
  "s_sig1": [
    14299034048228309879,
    16299565780310573392,
    15998913286752106717,
    2970393505278269610
  ],
  "s_sig2": [
    15874814119618441737,
    3838145094267394598,
    267000430093391948,
    8002274254488179789
  ],
  "z_omega": [
    9878447919839511700,
    11538281383216220854,
    14277858362312223865,
    6222858633082086440
  ]
}
test prover::test::test_prover ... ok
{
  "n_public": 1,
  "pow": 3,
  "k_1": [
    7,
    0,
    0,
    0
  ],
  "k_2": [
    13,
    0,
    0,
    0
  ],
  "q_m": [
    141,
    137,
    45,
    43,
    248,
    220,
    204,
    138,
    124,
    184,
    17,
    12,
    245,
    165,
    2,
    145,
    196,
    131,
    200,
    108,
    150,
    182,
    171,
    101,
    106,
    119,
    162,
    110,
    126,
    177,
    156,
    194,
    88,
    69,
    211,
    227,
    242,
    240,
    26,
    84,
    110,
    83,
    198,
    244,
    206,
    155,
    242,
    185
  ],
  "q_l": [
    182,
    198,
    181,
    156,
    243,
    70,
    238,
    153,
    3,
    221,
    11,
    235,
    177,
    209,
    165,
    53,
    42,
    55,
    220,
    41,
    122,
    232,
    207,
    6,
    211,
    61,
    92,
    60,
    200,
    228,
    225,
    54,
    218,
    44,
    131,
    163,
    26,
    213,
    160,
    136,
    176,
    240,
    54,
    27,
    108,
    231,
    160,
    250
  ],
  "q_r": [
    132,
    109,
    228,
    183,
    206,
    91,
    208,
    154,
    94,
    43,
    16,
    116,
    49,
    34,
    132,
    53,
    196,
    31,
    70,
    109,
    143,
    91,
    192,
    36,
    44,
    129,
    178,
    59,
    147,
    98,
    143,
    103,
    226,
    243,
    95,
    21,
    36,
    17,
    100,
    76,
    215,
    245,
    141,
    38,
    82,
    228,
    255,
    94
  ],
  "q_o": [
    182,
    114,
    167,
    87,
    135,
    128,
    116,
    184,
    188,
    52,
    32,
    240,
    206,
    55,
    82,
    29,
    185,
    96,
    26,
    194,
    30,
    37,
    228,
    100,
    120,
    213,
    70,
    66,
    70,
    145,
    86,
    175,
    35,
    164,
    55,
    240,
    201,
    88,
    237,
    8,
    17,
    9,
    156,
    145,
    108,
    100,
    1,
    135
  ],
  "q_c": [
    192,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ],
  "s_sig1_pre_in": [
    165,
    0,
    214,
    163,
    251,
    162,
    21,
    77,
    111,
    70,
    97,
    247,
    40,
    219,
    120,
    109,
    72,
    253,
    239,
    187,
    28,
    64,
    157,
    181,
    47,
    30,
    38,
    101,
    126,
    31,
    145,
    189,
    113,
    93,
    182,
    61,
    32,
    85,
    246,
    113,
    195,
    103,
    132,
    188,
    142,
    8,
    30,
    159
  ],
  "s_sig2_pre_in": [
    179,
    67,
    189,
    83,
    72,
    136,
    93,
    181,
    30,
    100,
    29,
    159,
    214,
    27,
    226,
    179,
    156,
    69,
    237,
    179,
    85,
    98,
    17,
    228,
    243,
    125,
    1,
    61,
    68,
    40,
    128,
    182,
    25,
    90,
    8,
    27,
    179,
    203,
    94,
    147,
    211,
    3,
    179,
    87,
    0,
    59,
    236,
    33
  ],
  "s_sig3_pre_in": [
    185,
    1,
    104,
    55,
    172,
    29,
    57,
    91,
    129,
    156,
    142,
    106,
    53,
    141,
    65,
    251,
    26,
    172,
    136,
    243,
    134,
    108,
    62,
    252,
    219,
    164,
    182,
    204,
    78,
    93,
    127,
    154,
    140,
    165,
    251,
    167,
    89,
    21,
    34,
    154,
    69,
    58,
    240,
    162,
    248,
    36,
    207,
    108
  ],
  "x_2": [
    179,
    150,
    115,
    166,
    66,
    244,
    17,
    253,
    132,
    255,
    123,
    184,
    21,
    36,
    27,
    159,
    105,
    189,
    21,
    6,
    43,
    20,
    85,
    45,
    83,
    55,
    164,
    196,
    93,
    179,
    190,
    246,
    47,
    199,
    100,
    48,
    83,
    15,
    49,
    34,
    65,
    139,
    219,
    215,
    61,
    219,
    111,
    196,
    2,
    214,
    132,
    236,
    185,
    217,
    61,
    182,
    65,
    255,
    29,
    152,
    113,
    186,
    155,
    242,
    76,
    185,
    100,
    223,
    103,
    168,
    98,
    151,
    137,
    220,
    133,
    168,
    115,
    164,
    88,
    66,
    121,
    83,
    222,
    217,
    70,
    208,
    146,
    195,
    181,
    123,
    16,
    191,
    109,
    207,
    213,
    98
  ],
  "gen": [
    8226103117418348410,
    12937471473925469952,
    10089793579461868770,
    3771596419760809703
  ]
}
pi is: Scalar(0x5f11dd507166705269b1d24a04de5547e45bbbe579f43625ab9277e0029976cd)
r0 is: Scalar(0x3dc5f8a6bd0a0763445ed8638f51dffd28e616da49e7175be27a0f5528b35237)
batchedPolyCommitG1 is: Kzg10Commitment(G1Affine { x: Fp(0x0d5fa09c8f9fdec76aeececa8ea4af6d6fd6e34efe58b4297e72959d0ded73c13a05822f670e9293f0afaee7b335627b), y: Fp(0x01a60d158d57d757a420d78a31972baa5ce82be78b5385804e2afe224634e32b05a45cc754bcd1bb1ce9f06cb76585c2), infinity: false })
batchedPolyCommitFull is: Kzg10Commitment(G1Affine { x: Fp(0x03f6f72cbb5b2fd160152f4c4c3e11ec2b1fad8950a14d245127e80e2079149303db6053121bc5411ad9e18336196da9), y: Fp(0x00ea441655e06f558d10aa106cb6094dfad2cad57a9e981fa1386fa387408a10baf06ec0c2f272f9f15ef8872302a4b2), infinity: false })
groupEncodedBatchEval is: G1Affine { x: Fp(0x12e950ad52ff3185b03da0acd9720d86c1a8b6e306d1aedee9bf14162c9a9a259b730dda2a682c05e876c62f4b4123a0), y: Fp(0x18a1867bf82dbba6b9874b1fb371b6d9ac1c7398368d45ca7a74819a7bcc9cff87235c48b12ca1a45a2111c51bf20b47), infinity: false }
test verifier::test::test_verifier ... ok

test result: ok. 11 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.03s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

